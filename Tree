import java.util.*;
public class ASCII
{
    public static void main()
    {
        Scanner scan = new Scanner(System.in);
        System.out.println("Please enter your sentence: ");
        String sentence = scan.nextLine();
        int [] ASCIIarray = new int[256];

        for(int i =0;i<sentence.length();i++)
        {
            int num =(int)sentence.charAt(i);
            ASCIIarray[num]++;
            System.out.println(String.format("%7s", Integer.toBinaryString(num)).replace(' ','0'));

        }
        PriorityQueue < Tree >  PQ = new PriorityQueue < Tree >() ;  //make a priority queue to hold the forest of trees    

        for(int i=0; i<ASCIIarray.length; i++){ 
            if(ASCIIarray[i]>0){
                System.out.println("'"+(char)i+"' appeared "+ASCIIarray[i]+((ASCIIarray[i] == 1) ? " time" : " times"));
                Node node = new Node();
                node.letter = (char)i;
                Tree tree = new Tree();
                tree.frequency = ASCIIarray[i];
                char theLetter = (char)i ;
                tree.root = node;
                PQ.add(tree);
          }
        }
        while(PQ.size()>1){            
            Tree tree1 = PQ.poll();
            Tree tree2 = PQ.poll();
            Tree jointTree = new Tree();
            jointTree.frequency = tree1.frequency + tree2.frequency;
            jointTree.root = new Node();
            jointTree.root.leftChild = tree1.root;
            jointTree.root.rightChild = tree2.root;
            PQ.add(jointTree);

        }
        Tree HuffmanTree = PQ.poll();  
        String huffmanCode = new String("");
        for(int i =0; i<sentence.length();i++) 
        { huffmanCode = huffmanCode + " "+ HuffmanTree.getCode(sentence.charAt(i)); 
        } 
        System.out.println(huffmanCode); 
        double num1 = huffmanCode.length()-sentence.length(); 
        double num2 = sentence.length()*7; 
        double compression = (num1/num2)*100; 
        System.out.println(num1 + " Huffman bits and " + num2 + " ASCII bits.compression rate: " + compression); 
    }

}      

public class Node
 {
   
   public char letter='@';            //stores letter
   
   public Node leftChild;         // this node's left child
   public Node rightChild;        // this node's right child

}  // end class Node



import java.io.*;
import java.util.*;               // for Stack class


public class Tree implements Comparable<Tree>
   {
   public Node root;             // first node of tree
   public int frequency=0;


   public Tree()                  // constructor
      {   root = null; }            // no nodes in tree yet


//the PriorityQueue needs to be able to somehow rank the objects in it
//thus, the objects in the PriorityQueue must implement an interface called Comparable
//the interface requires you to write a compareTo() method so here it is:

   public int compareTo(Tree object){ //
       if(frequency-object.frequency>0){ //compare the cumulative frequencies of the tree
           return 1;
        }else if(frequency-object.frequency<0){
           return -1;   //return 1 or -1 depending on whether these frequencies are bigger or smaller
        }else{
            return 0;   //return 0 if they're the same
        }
   }


   String path="error";     //this variable will track the path to the letter we're looking for 

   public String getCode(char letter){  //we want the code for this letter
 
       inOrder(root, letter, "");    //call an inOrder traversal, starting at the root, looking for this letter
       return path;     //return the path that results
            
   }


   private void inOrder(Node localRoot, char letter, String path){ //the path variable tracks the current search path
      if(localRoot != null){ //if root is null we've gone off the edge of the tree - back up 
          if(localRoot.letter==letter){
            this.path=path;     //if we've found the letter, note the path - final path = current search path
          }else{
            inOrder(localRoot.leftChild, letter, path+"0"); //go left and add "0" to the current search path
            inOrder(localRoot.rightChild, letter, path+"1");    //go right and add "1" to the current search path
         }
      }
      return; //quit searching this branch of the tree
   }

}  // end class Tree

   
